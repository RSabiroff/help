/*              ПРИМЕР №1           */// находим html элемент с id="demo" и меняем его содержимое значение Hello JavaScriptdocument.getElementById("demo").innerHTML = "Hello JavaScript";// пример<p id="demo">JavaScript can change HTML content.</p><button type="button" onclick='document.getElementById("demo").innerHTML = "Hello JavaScript!"'>Click Me!</button>/*              ПРИМЕР №2           */// меняем атрибут html<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button><img id="myImage" src="pic_bulboff.gif" style="width:100px"><button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>/*              ПРИМЕР №3           */// устанавливаем css стиль для html элемента<p id="demo">JavaScript can change the style of an HTML element.</p><button type="button" onclick="document.getElementById('demo').style.fontSize='35px'">Click Me!</button>/*              ПРИМЕР №4           */// скрываем html элемент<p id="demo">JavaScript can hide HTML elements.</p><button type="button" onclick="document.getElementById('demo').style.display='none'">Click Me!</button>/*              ПРИМЕР №5           */// отобразить ранее скрытый элемент<p>JavaScript can show hidden HTML elements.</p><p id="demo" style="display:none">Hello JavaScript!</p><button type="button" onclick="document.getElementById('demo').style.display='block'">Click Me!</button>/*              ПРИМЕР №6           */// объявление переменных и присвоение значенийvar x, y, z;x = 5;y = 6;z = x + y;/*              ПРИМЕР №6           */// написание кодаJavaScript programmers tend to use camel case that starts with a lowercase letter:firstName, lastName, masterCard, interCity./*              ПРИМЕР №6           */// написание кодаA good practice is to put spaces around operators ( = + - * / ):/*              ПРИМЕР №6           */// написание кодаFor best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it, is after an operator:Exampledocument.getElementById("demo").innerHTML ="Hello Dolly!";/*              ПРИМЕР №6           */// написание кодаbreak Завершает переключатель или циклcontinue Выходит из цикла и начинает вверхуdebugger Останавливает выполнение JavaScript и вызывает (если доступно) функцию отладкиdo ... while Выполняет блок операторов и повторяет блок, в то время как условие истинноfor  - блок операторов, которые должны выполняться, если условие истинноfunction Объявляет функциюif ... else Отмечает блок выполняемых операторов, в зависимости от условияreturn Выход из функцииswitch Отмечает блок операторов, которые должны выполняться, в зависимости от разных случаевtry ... catch Выполняет обработку ошибок в блоке операторовvar Объявляет переменнуюВсе переменные JavaScript должны быть идентифицированы с уникальными именами.Эти уникальные имена называются идентификаторами.Идентификаторами могут быть короткие имена (например, x и y) или более описательные имена (возраст, сумма, totalVolume)./*              ПРИМЕР №6           */// написание кодаОбщие правила построения имен переменных (уникальные идентификаторы):Имена могут содержать буквы, цифры, символы подчеркивания и знаки доллара.Имена должны начинаться с буквыИмена также могут начинаться с $ и _ (но мы не будем использовать его в этом уроке)Имена чувствительны к регистру (y и Y - разные переменные)Зарезервированные слова (например, ключевые слова JavaScript) не могут использоваться как имена/*              ПРИМЕР №6           */// написание кодаIn JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.This is different from algebra. The following does not make sense in algebra:x = x + 5Однако в JavaScript это имеет смысл: он присваивает значение x + 5 x.(Он вычисляет значение x + 5 и помещает результат в x. Значение x увеличивается на 5.)/*              ПРИМЕР №6           */// написание кодаПеременные JavaScript могут содержать цифры типа 100 и текстовые значения типа «Джон Доу».В программировании текстовые значения называются текстовыми строками.JavaScript может обрабатывать многие типы данных, но пока, просто подумайте о числах и строках.Строки записываются внутри двойных или одинарных кавычек. Числа записываются без кавычек.Если вы поместите число в кавычки, оно будет рассматриваться как текстовая строка./*              ПРИМЕР №6           */// написание кодаIt's a good programming practice to declare all variables at the beginning of a script./*              ПРИМЕР №6           */// написание кодаЗначение = неопределенноеВ компьютерных программах переменные часто объявляются без значения. Значение может быть то, чтодолжно быть рассчитано, или что-то, что будет предоставлено позже, например, ввод пользователя.Переменная, объявленная без значения, будет иметь значение undefined.Переменная carName будет иметь значение undefined после выполнения этого оператора:примерvar carName;/*              ПРИМЕР №6           */// написание кодаJavaScript ArithmeticAs with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:Examplevar x = 5 + 2 + 3;Try it Yourself »You can also add strings, but strings will be concatenated:Examplevar x = "John" + " " + "Doe";Try it Yourself »Also try this:Examplevar x = "5" + 2 + 3;Try it Yourself »If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.Now try this:Examplevar x = 2 + 3 + "5";/*              ПРИМЕР №6           */// написание кодаJavaScript Arithmetic OperatorsArithmetic operators are used to perform arithmetic on numbers:Operator	Description+	Addition-	Subtraction*	Multiplication/	Division%	Modulus++	Increment--	Decrement/*              ПРИМЕР №6           */// написание кодаJavaScript Assignment OperatorsAssignment operators assign values to JavaScript variables.Operator	Example	Same As=	x = y	x = y+=	x += y	x = x + y-=	x -= y	x = x - y*=	x *= y	x = x * y/=	x /= y	x = x / y%=	x %= y	x = x % y/*              ПРИМЕР №6           */// написание кодаJavaScript Assignment OperatorsJavaScript String OperatorsThe + operator can also be used to add (concatenate) strings.Exampletxt1 = "John";txt2 = "Doe";txt3 = txt1 + " " + txt2;The result of txt3 will be:John DoeTry it Yourself »The += assignment operator can also be used to add (concatenate) strings:Exampletxt1 = "What a very ";txt1 += "nice day";The result of txt1 will be:What a very nice dayWhen used on strings, the + operator is called the concatenation operator./*              ПРИМЕР №6           */// написание кодаJavaScript Comparison OperatorsOperator	Description==	equal to===	equal value and equal type!=	not equal!==	not equal value or not equal type>	greater than<	less than>=	greater than or equal to<=	less than or equal to?	ternary operator/*              ПРИМЕР №6           */// написание кодаJavaScript Logical OperatorsOperator	Description&&	logical and||	logical or!	logical not/*              ПРИМЕР №6           */// написание кодаJavaScript Arithmetic OperatorsArithmetic operators perform arithmetic on numbers (literals or variables).Operator	Description+	Addition-	Subtraction*	Multiplication/	Division%	Modulus++	Increment--	Decrement/*              ПРИМЕР №6           */// написание кодаJavaScript Data TypesJavaScript variables can hold many data types: numbers, strings, objects and more:var length = 16;                               // Numbervar lastName = "Johnson";                      // Stringvar x = {firstName:"John", lastName:"Doe"};    // Object/*              ПРИМЕР №6           */// написание кодаJavaScript ArraysJavaScript arrays are written with square brackets.Array items are separated by commas.The following code declares (creates) an array called cars, containing three items (car names):Examplevar cars = ["Saab", "Volvo", "BMW"];<p>Array indexes are zero-based, which means the first item is [0].</p><p id="demo"></p><script>var cars = ["Saab","Volvo","BMW"];document.getElementById("demo").innerHTML = cars[0];</script>/*              ПРИМЕР №6           */// написание кодаJavaScript ObjectsJavaScript objects are written with curly braces.Object properties are written as name:value pairs, separated by commas.Examplevar person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};/*              ПРИМЕР №6           */// написание кодаFunction ReturnWhen JavaScript reaches a return statement, the function will stop executing.If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.Functions often compute a return value. The return value is "returned" back to the "caller":ExampleCalculate the product of two numbers, and return the result:var x = myFunction(4, 3);        // Function is called, return value will end up in xfunction myFunction(a, b) {    return a * b;                // Function returns the product of a and b}The result in x will be:12